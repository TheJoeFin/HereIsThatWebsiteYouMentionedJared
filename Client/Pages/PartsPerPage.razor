@page "/partsper"
@using BlazorApp.Client

<table>
    <tbody>
        <tr>
            <td>
                <h2 style="vertical-align:middle;">Parts Per </h2>
            </td>
            <td>
                <input type="text" class="form-control" @bind="recipeName" />
            </td>
        </tr>
    </tbody>
</table>

<span style="display: block; margin: 6px 0px 24px 0px">
    <input class="form-control" style="max-width: 48px; display: inline-flex;" type="number" @bind="TotalOunces" />
    <p style="vertical-align:middle; display: inline;">Total Ounces </p>
</span>

<div class="input-group mb-3">
    <input @bind="newIngredientName" type="text" class="form-control" @onkeyup="keyUpd"
        placeholder="enter new ingredient here..." aria-label="Recipient's username" aria-describedby="basic-addon2" />
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="addIngredient" type="button">+ Add</button>
    </div>
</div>

<div>

    <table class="table">
        <thead>

            <tr>
                <th>
                    Ingredient
                </th>
                <th>
                    Parts
                </th>
                <th>
                    Oz
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ingredient in ingredients)
            {
                <PartRow ThisIngredient="@ingredient" RowDeleted="deleteThisRow" PartsChanged="partsHaveChanged" />
            }
        </tbody>
    </table>
</div>

<button @onclick="ShowExportModal" class="btn btn-primary">Export</button>



@code{
    protected override void OnInitialized()
    {
        SetUpInitialData();
    }

    private void SetUpInitialData()
    {
        Ingredient whiskey = new Ingredient()
        {
            Name = "Whiskey",
            ID = 0,
            Parts = 5
        };
        ingredients.Add(whiskey);

        Ingredient lemon = new Ingredient()
        {
            Name = "Lemon",
            ID = 1,
            Parts = 2
        };
        ingredients.Add(lemon);

        Ingredient simple = new Ingredient()
        {
            Name = "Simple Syrup",
            ID = 2,
            Parts = 1
        };
        ingredients.Add(simple);

        updateAll();
    }

    [CascadingParameter] public IModalService Modal { get; set; }

    void ShowExportModal()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(ExportModal.Ingredients), ingredients);

        Modal.Show<ExportModal>($"{totalOz} Oz of {recipeName}", parameters);
    }

    private IList<Ingredient> ingredients = new List<Ingredient>();

    private string recipeName = "Whiskey Sour";

    private string newIngredientName = "";

    private double totalOz = 4;
    public double TotalOunces
    {
        get
        {
            return totalOz;
        }
        set
        {
            totalOz = value;
            updateAll();
        }
    }

    private void addIngredient()
    {
        if (!string.IsNullOrWhiteSpace(newIngredientName))
        {
            int newID = 0;

            if (ingredients.Count > 0)
                newID = ingredients.Max(i => i.ID) + 1;

            ingredients.Add(new Ingredient { Name = newIngredientName, ID = newID });
            newIngredientName = "";
            MouseEventArgs e = new MouseEventArgs();
            partsHaveChanged(e);
        }
    }

    private void keyUpd(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter") // fire on enter
        {
            addIngredient();
        }
    }

    private void updateAll()
    {
        MouseEventArgs e = new MouseEventArgs();
        partsHaveChanged(e);
    }

    private void deleteThisRow(string ingID)
    {
        Ingredient deletedRow = ingredients.Where(i => i.ID.ToString() == ingID).FirstOrDefault();

        if (deletedRow != null)
        {
            ingredients.Remove(deletedRow);
            updateAll();
        }
    }

    private void partsHaveChanged(MouseEventArgs e)
    {
        this.StateHasChanged();

        int totalParts = ingredients.Sum(i => i.Parts);

        foreach (var ing in ingredients)
        {
            ing.TotalParts = totalParts;
            ing.FinalOunces = TotalOunces;
        }
    }

}